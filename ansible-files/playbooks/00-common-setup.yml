---
- name: Setup K8s Master and Worker Nodes
  hosts: all
  become: true
  gather_facts: true

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present

    - name: Install Docker dependencies
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Add Docker GPG apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Create Docker group
      group:
        name: docker
        state: present

    - name: Add Ubuntu user to Docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Enable Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Create daemon.json for Docker insecure registries
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "insecure-registries": [
              "{{ hostvars['master']['ansible_host'] }}:30500",
              "{{ master_private_ip }}:30500"
            ]
          }

    - name: Restart Docker after configuring insecure registries
      systemd:
        name: docker
        state: restarted

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      become: yes

    - name: Download and install Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      become: yes

    - name: Set permissions on Kubernetes keyring
      file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'
      become: yes

    - name: Add Kubernetes APT repository (manually)
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /
      become: yes

    - name: Update apt cache
      apt:
        update_cache: yes
      become: yes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        allow_downgrade: yes

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - kubelet
        - kubeadm
        - kubectl

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Remove swap from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        line: '# \1'
        backrefs: yes

    - name: Get latest cri-dockerd version
      uri:
        url: https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest
        return_content: yes
      register: cri_dockerd_release

    - name: Extract version tag
      set_fact:
        cri_dockerd_version: "{{ cri_dockerd_release.json.tag_name | regex_replace('^v', '') }}"

    - name: Download cri-dockerd tarball
      get_url:
        url: "https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version }}/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz"
        dest: "/tmp/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz"

    - name: Extract cri-dockerd
      unarchive:
        src: "/tmp/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz"
        dest: /tmp/
        remote_src: yes

    - name: Move cri-dockerd binary to /usr/local/bin
      copy:
        src: /tmp/cri-dockerd/cri-dockerd
        dest: /usr/local/bin/cri-dockerd
        mode: '0755'
        remote_src: yes

    - name: Download cri-docker.service
      get_url:
        url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service
        dest: /etc/systemd/system/cri-docker.service

    - name: Download cri-docker.socket
      get_url:
        url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket
        dest: /etc/systemd/system/cri-docker.socket

    - name: Update cri-docker.service path to cri-dockerd binary
      replace:
        path: /etc/systemd/system/cri-docker.service
        regexp: '/usr/bin/cri-dockerd'
        replace: '/usr/local/bin/cri-dockerd'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start cri-docker.socket
      systemd:
        name: cri-docker.socket
        enabled: yes
        state: started

    - name: Configure kubelet to use cri-dockerd socket
      copy:
        dest: /etc/default/kubelet
        content: |
          KUBELET_EXTRA_ARGS=--container-runtime-endpoint=unix:///var/run/cri-dockerd.sock

    - name: Reload systemd and restart kubelet
      systemd:
        daemon_reload: yes
        name: kubelet
        enabled: yes
        state: restarted

    - name: Enable kubelet service
      systemd:
        name: kubelet
        enabled: yes

    - name: Ensure br_netfilter module is loaded
      modprobe:
        name: br_netfilter
        state: present

    - name: Ensure module loading is persistent on boot
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          br_netfilter

    - name: Apply sysctl settings for Kubernetes networking
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
      with_items:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }

    - name: Persist sysctl settings across reboots
      copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1

    - name: Reload sysctl settings
      command: sysctl --system
